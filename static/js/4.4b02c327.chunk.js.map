{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","avatar","alt","src","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElement","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,0BAA0B,QAAU,2B,uICG/MC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OAGT,kBAACG,EAAcE,KAAKC,OAFhB,kBAAC,IAAD,CAAUC,GAAI,eAJU,GACXC,IAAML,WAWtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCN9DM,EAVI,SAACJ,GAChB,IAAIK,EAAI,mBAAeL,EAAMM,IAC7B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,0BAAMH,UAAWC,IAAEG,QAAQ,yBAAKC,IAAI,aAAaC,IAAK,2EACtD,kBAAC,IAAD,CAASZ,GAAII,GAAOL,EAAMc,QCAvBC,EANC,SAACf,GACb,OACI,yBAAKO,UAAWC,IAAEQ,SAAUhB,EAAMgB,U,yCCgCpCC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACpB,GACpB,OACI,0BAAMsB,SAAUtB,EAAMuB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBC,UAAWC,IAAUb,KAAM,iBACrEc,SAAU,CAACC,IAAUZ,MAEzB,6BACI,6CAQDa,EA9CC,SAAC9B,GAEb,IAAIP,EAAQO,EAAM+B,YACdC,EAAkBvC,EAAMwC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE7B,GAAIA,GAAI6B,EAAE7B,QACpF+B,EAAkB5C,EAAM6C,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAEjC,QAMlF,OAAKN,EAAMN,OAKP,yBAAKa,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAEgC,cACd,6BAAMR,IAEV,yBAAKzB,UAAWC,IAAE8B,UACd,6BAAMD,GACN,kBAAClB,EAAD,CAAqBG,SAfb,SAACmB,GACjBzC,EAAM0C,YAAYD,EAAOE,qBAIlB,kBAAC,IAAD,CAAU1C,GAAI,Y,wBCGd2C,sBACXzC,aAlBkB,SAACV,GACrB,MAAO,CACHsC,YAAatC,EAAMsC,gBAIA,SAACc,GACtB,MAAO,CACHH,YAAa,SAACC,GACVE,EAASC,YAAmBH,SAUpC/C,IAFWgD,CAGbd","file":"static/js/4.4b02c327.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"avatar\":\"Dialogs_avatar__1hg1l\",\"active\":\"Dialogs_active__2sQhs\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuth: state.auth.isAuth,\n    }\n};\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) {\n                return <Redirect to={'/login'}/>\n            }\n            return <Component {...this.props}/>\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n};","import React from 'react';\nimport s from '../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = `/dialogs/${props.id}`;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <span className={s.avatar}><img alt='dialogsAva' src={'https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg'}/></span>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport s from '../Dialogs.module.css';\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n};\n\nexport default Message;\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElement = state.messages.map(m => <Message message={m.message} key={m.id}/>);\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody);\n    };\n\n    if (!props.isAuth) {\n        return <Redirect to={'/login'}/>;\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                <div>{dialogsElements}</div>\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElement}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n\n        </div>\n    )\n};\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'Enter your message'} component={Textarea} name={'newMessageBody'}\n                validate={[required, maxLength50]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n};\n\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);\n\nexport default Dialogs;\n","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n      dialogsPage: state.dialogsPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody));\n        },\n    };\n};\n\n\n\n// High Order Component & Compose\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}